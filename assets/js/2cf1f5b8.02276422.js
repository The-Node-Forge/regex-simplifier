"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4008],{9334:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"API_REFERENCE","title":"API Reference","description":"API parameters, returns, examples.","source":"@site/docs/API_REFERENCE.md","sourceDirName":".","slug":"/API_REFERENCE","permalink":"/regex-simplifier/docs/API_REFERENCE","draft":false,"unlisted":false,"editUrl":"https://github.com/The-Node-Forge/regex-simplifier/tree/main/docs/docs/API_REFERENCE.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"API Reference","description":"API parameters, returns, examples.","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Usage","permalink":"/regex-simplifier/docs/USAGE"},"next":{"title":"Changelog","permalink":"/regex-simplifier/docs/CHANGELOG"}}');var i=r(4848),t=r(8453);const l={title:"API Reference",description:"API parameters, returns, examples.",sidebar_position:4},a="\ud83d\udcd8 API Reference",d={},c=[{value:"<code>build(name: string): RegExp</code>",id:"buildname-string-regexp",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"<code>test(value: string, pattern: string | RegExp): boolean</code>",id:"testvalue-string-pattern-string--regexp-boolean",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<code>explain(pattern: string | RegExp): string</code>",id:"explainpattern-string--regexp-string",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-2",level:3}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-api-reference",children:"\ud83d\udcd8 API Reference"})}),"\n",(0,i.jsx)(n.h2,{id:"buildname-string-regexp",children:(0,i.jsx)(n.code,{children:"build(name: string): RegExp"})}),"\n",(0,i.jsx)(n.p,{children:"Returns a regular expression based on a predefined pattern name."}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," \u2014 ",(0,i.jsx)(n.code,{children:"string"}),(0,i.jsx)(n.br,{}),"\n",'The name of the pattern (e.g. "email", "url", "uuid")']}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RegExp"}),(0,i.jsx)(n.br,{}),"\n","The corresponding regular expression"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const emailRegex = build('email');\nconsole.log(emailRegex.test('me@example.com')); // true\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"testvalue-string-pattern-string--regexp-boolean",children:(0,i.jsx)(n.code,{children:"test(value: string, pattern: string | RegExp): boolean"})}),"\n",(0,i.jsxs)(n.p,{children:["Tests a string against either a predefined pattern name or a raw ",(0,i.jsx)(n.code,{children:"RegExp"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," \u2014 ",(0,i.jsx)(n.code,{children:"string"}),(0,i.jsx)(n.br,{}),"\n","The string to test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pattern"})," \u2014 ",(0,i.jsx)(n.code,{children:"string | RegExp"}),(0,i.jsx)(n.br,{}),"\n","A named pattern or a raw regular expression"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"boolean"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"true"})," if the string matches the pattern; otherwise ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"console.log(test('12345', 'zip')); // true\nconsole.log(test('invalid', 'email')); // false\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"explainpattern-string--regexp-string",children:(0,i.jsx)(n.code,{children:"explain(pattern: string | RegExp): string"})}),"\n",(0,i.jsx)(n.p,{children:"Returns a plain-English explanation of a regular expression."}),"\n",(0,i.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pattern"})," \u2014 ",(0,i.jsx)(n.code,{children:"string | RegExp"}),(0,i.jsx)(n.br,{}),"\n","The regular expression to explain"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"}),(0,i.jsx)(n.br,{}),"\n","A readable description of the regex pattern"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"console.log(explain(/^\\d{5}$/));\n/*\nThis pattern includes:\n- Starts with\n- exactly five digits\n- Ends with\n*/\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);